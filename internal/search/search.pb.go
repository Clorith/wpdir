// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: search.proto

package search

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Search_Status int32

const (
	Queued    Search_Status = 0
	Started   Search_Status = 1
	Completed Search_Status = 2
)

var Search_Status_name = map[int32]string{
	0: "Queued",
	1: "Started",
	2: "Completed",
}
var Search_Status_value = map[string]int32{
	"Queued":    0,
	"Started":   1,
	"Completed": 2,
}

func (Search_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{0, 0}
}

type Search struct {
	ID        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Input     string        `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Repo      string        `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Started   string        `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
	Completed string        `protobuf:"bytes,5,opt,name=completed,proto3" json:"completed,omitempty"`
	Progress  uint32        `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	Private   bool          `protobuf:"varint,7,opt,name=private,proto3" json:"private,omitempty"`
	Status    Search_Status `protobuf:"varint,8,opt,name=status,proto3,enum=search.Search_Status" json:"status,omitempty"`
	Options   *Options      `protobuf:"bytes,9,opt,name=options" json:"options,omitempty"`
	Matches   uint32        `protobuf:"varint,10,opt,name=matches,proto3" json:"matches"`
	Revision  uint32        `protobuf:"varint,11,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (m *Search) Reset()      { *m = Search{} }
func (*Search) ProtoMessage() {}
func (*Search) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{0}
}
func (m *Search) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Search) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Search.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Search) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Search.Merge(dst, src)
}
func (m *Search) XXX_Size() int {
	return m.Size()
}
func (m *Search) XXX_DiscardUnknown() {
	xxx_messageInfo_Search.DiscardUnknown(m)
}

var xxx_messageInfo_Search proto.InternalMessageInfo

type Options struct {
	IgnoreCase     bool   `protobuf:"varint,1,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
	LinesOfContext uint32 `protobuf:"varint,2,opt,name=lines_of_context,json=linesOfContext,proto3" json:"lines_of_context,omitempty"`
	FileRegexp     string `protobuf:"bytes,3,opt,name=file_regexp,json=fileRegexp,proto3" json:"file_regexp,omitempty"`
	IgnoreComments bool   `protobuf:"varint,4,opt,name=ignore_comments,json=ignoreComments,proto3" json:"ignore_comments,omitempty"`
	Offset         uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          uint32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *Options) Reset()      { *m = Options{} }
func (*Options) ProtoMessage() {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{1}
}
func (m *Options) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Options.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(dst, src)
}
func (m *Options) XXX_Size() int {
	return m.Size()
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

type Summary struct {
	Total uint64             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  map[string]*Result `protobuf:"bytes,2,rep,name=list" json:"list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Summary) Reset()      { *m = Summary{} }
func (*Summary) ProtoMessage() {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{2}
}
func (m *Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(dst, src)
}
func (m *Summary) XXX_Size() int {
	return m.Size()
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

type Result struct {
	Slug           string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version        string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Homepage       string `protobuf:"bytes,4,opt,name=homepage,proto3" json:"homepage,omitempty"`
	ActiveInstalls uint32 `protobuf:"varint,5,opt,name=active_installs,json=activeInstalls,proto3" json:"active_installs"`
	Matches        uint32 `protobuf:"varint,6,opt,name=matches,proto3" json:"matches"`
}

func (m *Result) Reset()      { *m = Result{} }
func (*Result) ProtoMessage() {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{3}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type Matches struct {
	List []*Match `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *Matches) Reset()      { *m = Matches{} }
func (*Matches) ProtoMessage() {}
func (*Matches) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{4}
}
func (m *Matches) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Matches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Matches.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Matches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matches.Merge(dst, src)
}
func (m *Matches) XXX_Size() int {
	return m.Size()
}
func (m *Matches) XXX_DiscardUnknown() {
	xxx_messageInfo_Matches.DiscardUnknown(m)
}

var xxx_messageInfo_Matches proto.InternalMessageInfo

type Match struct {
	Slug     string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	File     string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	LineNum  uint32 `protobuf:"varint,3,opt,name=line_num,json=lineNum,proto3" json:"line_num,omitempty"`
	LineText string `protobuf:"bytes,4,opt,name=line_text,json=lineText,proto3" json:"line_text,omitempty"`
}

func (m *Match) Reset()      { *m = Match{} }
func (*Match) ProtoMessage() {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_search_cba70e344642d923, []int{5}
}
func (m *Match) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Match.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(dst, src)
}
func (m *Match) XXX_Size() int {
	return m.Size()
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Search)(nil), "search.Search")
	proto.RegisterType((*Options)(nil), "search.Options")
	proto.RegisterType((*Summary)(nil), "search.Summary")
	proto.RegisterMapType((map[string]*Result)(nil), "search.Summary.ListEntry")
	proto.RegisterType((*Result)(nil), "search.Result")
	proto.RegisterType((*Matches)(nil), "search.Matches")
	proto.RegisterType((*Match)(nil), "search.Match")
	proto.RegisterEnum("search.Search_Status", Search_Status_name, Search_Status_value)
}
func (x Search_Status) String() string {
	s, ok := Search_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (m *Search) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Search) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Input) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Input)))
		i += copy(dAtA[i:], m.Input)
	}
	if len(m.Repo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Repo)))
		i += copy(dAtA[i:], m.Repo)
	}
	if len(m.Started) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Started)))
		i += copy(dAtA[i:], m.Started)
	}
	if len(m.Completed) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Completed)))
		i += copy(dAtA[i:], m.Completed)
	}
	if m.Progress != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Progress))
	}
	if m.Private {
		dAtA[i] = 0x38
		i++
		if m.Private {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Status))
	}
	if m.Options != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Options.Size()))
		n1, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Matches != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Matches))
	}
	if m.Revision != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Revision))
	}
	return i, nil
}

func (m *Options) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Options) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IgnoreCase {
		dAtA[i] = 0x8
		i++
		if m.IgnoreCase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LinesOfContext != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.LinesOfContext))
	}
	if len(m.FileRegexp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FileRegexp)))
		i += copy(dAtA[i:], m.FileRegexp)
	}
	if m.IgnoreComments {
		dAtA[i] = 0x20
		i++
		if m.IgnoreComments {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Offset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Total))
	}
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0x12
			i++
			v := m.List[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovSearch(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovSearch(uint64(len(k))) + msgSize
			i = encodeVarintSearch(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintSearch(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Homepage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Homepage)))
		i += copy(dAtA[i:], m.Homepage)
	}
	if m.ActiveInstalls != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.ActiveInstalls))
	}
	if m.Matches != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.Matches))
	}
	return i, nil
}

func (m *Matches) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Matches) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSearch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Match) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if len(m.File) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if m.LineNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSearch(dAtA, i, uint64(m.LineNum))
	}
	if len(m.LineText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(m.LineText)))
		i += copy(dAtA[i:], m.LineText)
	}
	return i, nil
}

func encodeVarintSearch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Search) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Started)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Completed)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovSearch(uint64(m.Progress))
	}
	if m.Private {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovSearch(uint64(m.Status))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Matches != 0 {
		n += 1 + sovSearch(uint64(m.Matches))
	}
	if m.Revision != 0 {
		n += 1 + sovSearch(uint64(m.Revision))
	}
	return n
}

func (m *Options) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IgnoreCase {
		n += 2
	}
	if m.LinesOfContext != 0 {
		n += 1 + sovSearch(uint64(m.LinesOfContext))
	}
	l = len(m.FileRegexp)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.IgnoreComments {
		n += 2
	}
	if m.Offset != 0 {
		n += 1 + sovSearch(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSearch(uint64(m.Limit))
	}
	return n
}

func (m *Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovSearch(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSearch(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSearch(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSearch(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.ActiveInstalls != 0 {
		n += 1 + sovSearch(uint64(m.ActiveInstalls))
	}
	if m.Matches != 0 {
		n += 1 + sovSearch(uint64(m.Matches))
	}
	return n
}

func (m *Matches) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.LineNum != 0 {
		n += 1 + sovSearch(uint64(m.LineNum))
	}
	l = len(m.LineText)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func sovSearch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSearch(x uint64) (n int) {
	return sovSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Search) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Search{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`Repo:` + fmt.Sprintf("%v", this.Repo) + `,`,
		`Started:` + fmt.Sprintf("%v", this.Started) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`Private:` + fmt.Sprintf("%v", this.Private) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "Options", "Options", 1) + `,`,
		`Matches:` + fmt.Sprintf("%v", this.Matches) + `,`,
		`Revision:` + fmt.Sprintf("%v", this.Revision) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Options) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Options{`,
		`IgnoreCase:` + fmt.Sprintf("%v", this.IgnoreCase) + `,`,
		`LinesOfContext:` + fmt.Sprintf("%v", this.LinesOfContext) + `,`,
		`FileRegexp:` + fmt.Sprintf("%v", this.FileRegexp) + `,`,
		`IgnoreComments:` + fmt.Sprintf("%v", this.IgnoreComments) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Summary) String() string {
	if this == nil {
		return "nil"
	}
	keysForList := make([]string, 0, len(this.List))
	for k, _ := range this.List {
		keysForList = append(keysForList, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForList)
	mapStringForList := "map[string]*Result{"
	for _, k := range keysForList {
		mapStringForList += fmt.Sprintf("%v: %v,", k, this.List[k])
	}
	mapStringForList += "}"
	s := strings.Join([]string{`&Summary{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`List:` + mapStringForList + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result{`,
		`Slug:` + fmt.Sprintf("%v", this.Slug) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Homepage:` + fmt.Sprintf("%v", this.Homepage) + `,`,
		`ActiveInstalls:` + fmt.Sprintf("%v", this.ActiveInstalls) + `,`,
		`Matches:` + fmt.Sprintf("%v", this.Matches) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Matches) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Matches{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Match", "Match", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Match) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Match{`,
		`Slug:` + fmt.Sprintf("%v", this.Slug) + `,`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`LineNum:` + fmt.Sprintf("%v", this.LineNum) + `,`,
		`LineText:` + fmt.Sprintf("%v", this.LineText) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSearch(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Search) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Search: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Search: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Started = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Completed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Private = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Search_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &Options{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			m.Matches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matches |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Options) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreCase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreCase = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinesOfContext", wireType)
			}
			m.LinesOfContext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinesOfContext |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileRegexp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileRegexp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreComments", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreComments = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[string]*Result)
			}
			var mapkey string
			var mapvalue *Result
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSearch
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSearch
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSearch
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Result{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSearch(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSearch
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveInstalls", wireType)
			}
			m.ActiveInstalls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveInstalls |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			m.Matches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matches |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Matches) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Matches: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Matches: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Match{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNum", wireType)
			}
			m.LineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSearch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSearch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSearch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("search.proto", fileDescriptor_search_cba70e344642d923) }

var fileDescriptor_search_cba70e344642d923 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0xf5, 0xe4, 0xc3, 0x4e, 0x6e, 0x48, 0x1a, 0x0d, 0xf0, 0xe4, 0x57, 0xd0, 0x24, 0x44, 0x20,
	0x82, 0x44, 0xf3, 0x50, 0xd8, 0x20, 0xc4, 0x02, 0xa5, 0x20, 0xf4, 0x24, 0xe0, 0x89, 0x09, 0xfb,
	0xc8, 0x4d, 0x26, 0xce, 0x08, 0xdb, 0x63, 0x79, 0xc6, 0x51, 0xbb, 0x63, 0xc7, 0x96, 0x1d, 0x7f,
	0x81, 0x9f, 0xc0, 0x4f, 0x78, 0x12, 0x2c, 0xba, 0xec, 0xaa, 0x6a, 0xdc, 0x0d, 0xea, 0xaa, 0x3f,
	0x01, 0xcd, 0x87, 0x03, 0x42, 0xea, 0x2a, 0xf7, 0x9c, 0x33, 0x9e, 0xb9, 0xf7, 0xdc, 0xa3, 0xc0,
	0x1b, 0x92, 0x45, 0xc5, 0x7a, 0x37, 0xcb, 0x0b, 0xa1, 0x04, 0xf6, 0x2d, 0x3a, 0x3d, 0x8b, 0xb9,
	0xda, 0x95, 0x17, 0xb3, 0xb5, 0x48, 0x5f, 0xc4, 0x22, 0x16, 0x2f, 0x8c, 0x7c, 0x51, 0x6e, 0x0d,
	0x32, 0xc0, 0x54, 0xf6, 0xb3, 0xc9, 0x2f, 0x4d, 0xf0, 0x97, 0xe6, 0x4b, 0xfc, 0x0c, 0x1a, 0x7c,
	0x13, 0xa2, 0x31, 0x9a, 0x76, 0x17, 0x7e, 0x75, 0x3b, 0x6a, 0xbc, 0xfc, 0x8a, 0x36, 0xf8, 0x06,
	0xbf, 0x05, 0x6d, 0x9e, 0xe5, 0xa5, 0x0a, 0x1b, 0x5a, 0xa2, 0x16, 0x60, 0x0c, 0xad, 0x82, 0xe5,
	0x22, 0x6c, 0x1a, 0xd2, 0xd4, 0x38, 0x84, 0x40, 0xaa, 0xa8, 0x50, 0x6c, 0x13, 0xb6, 0x0c, 0x5d,
	0x43, 0xfc, 0x2e, 0x74, 0xd7, 0x22, 0xcd, 0x13, 0xa6, 0xb5, 0xb6, 0xd1, 0xfe, 0x25, 0xf0, 0x29,
	0x74, 0xf2, 0x42, 0xc4, 0x05, 0x93, 0x32, 0xf4, 0xc7, 0x68, 0xda, 0xa7, 0x47, 0xac, 0xef, 0xcc,
	0x0b, 0xbe, 0x8f, 0x14, 0x0b, 0x83, 0x31, 0x9a, 0x76, 0x68, 0x0d, 0xf1, 0x19, 0xf8, 0x52, 0x45,
	0xaa, 0x94, 0x61, 0x67, 0x8c, 0xa6, 0x83, 0xf9, 0xdb, 0x33, 0x67, 0xc8, 0xd2, 0xfd, 0x18, 0x91,
	0xba, 0x43, 0xf8, 0x23, 0x08, 0x44, 0xae, 0xb8, 0xc8, 0x64, 0xd8, 0x1d, 0xa3, 0x69, 0x6f, 0x7e,
	0x52, 0x9f, 0x7f, 0x65, 0x69, 0x5a, 0xeb, 0xf8, 0x03, 0x08, 0xd2, 0x48, 0xad, 0x77, 0x4c, 0x86,
	0xa0, 0xdb, 0x59, 0xf4, 0x1e, 0x6e, 0x47, 0x35, 0x45, 0xeb, 0x42, 0xb7, 0x5d, 0xb0, 0x3d, 0x97,
	0x5c, 0x64, 0x61, 0xcf, 0xb6, 0x5d, 0xe3, 0xc9, 0x27, 0xe0, 0xdb, 0xf7, 0x31, 0x80, 0xff, 0x43,
	0xc9, 0x4a, 0xb6, 0x19, 0x7a, 0xb8, 0x07, 0xc1, 0xd2, 0x3a, 0x32, 0x44, 0xb8, 0x0f, 0xdd, 0xf3,
	0xda, 0x82, 0x61, 0x63, 0xf2, 0x17, 0x82, 0xc0, 0x75, 0x82, 0x47, 0xd0, 0xe3, 0x71, 0x26, 0x0a,
	0xb6, 0x5a, 0x47, 0x92, 0x99, 0x9d, 0x74, 0x28, 0x58, 0xea, 0x3c, 0x92, 0x0c, 0x4f, 0x61, 0x98,
	0xf0, 0x8c, 0xc9, 0x95, 0xd8, 0xae, 0xd6, 0x22, 0x53, 0xec, 0xd2, 0xae, 0xa7, 0x4f, 0x07, 0x86,
	0x7f, 0xb5, 0x3d, 0xb7, 0xac, 0xbe, 0x6a, 0xcb, 0x13, 0xb6, 0x2a, 0x58, 0xcc, 0x2e, 0x73, 0xb7,
	0x2e, 0xd0, 0x14, 0x35, 0x0c, 0xfe, 0x10, 0x4e, 0xea, 0xb7, 0x44, 0x9a, 0xb2, 0x4c, 0x49, 0xb3,
	0xbc, 0x0e, 0x1d, 0xb8, 0xf7, 0x1c, 0x8b, 0x9f, 0x81, 0x2f, 0xb6, 0x5b, 0xc9, 0x94, 0x59, 0x60,
	0x9f, 0x3a, 0xa4, 0xf3, 0x91, 0xf0, 0x94, 0x2b, 0xb7, 0x3a, 0x0b, 0x26, 0xbf, 0x21, 0x08, 0x96,
	0x65, 0x9a, 0x46, 0xc5, 0x95, 0x3e, 0xa1, 0x84, 0x8a, 0x12, 0x33, 0x48, 0x8b, 0x5a, 0x80, 0xcf,
	0xa0, 0x95, 0x70, 0xa9, 0xfb, 0x6e, 0x4e, 0x7b, 0xf3, 0xe7, 0xc7, 0xed, 0xd9, 0x8f, 0x66, 0xdf,
	0x72, 0xa9, 0xbe, 0xce, 0x54, 0x71, 0x45, 0xcd, 0xb1, 0xd3, 0x6f, 0xa0, 0x7b, 0xa4, 0xf0, 0x10,
	0x9a, 0x3f, 0xb1, 0x2b, 0x1b, 0x56, 0xaa, 0x4b, 0xfc, 0x3e, 0xb4, 0xf7, 0x51, 0x52, 0x32, 0x63,
	0x43, 0x6f, 0x3e, 0xa8, 0xaf, 0xa3, 0x4c, 0x96, 0x89, 0xa2, 0x56, 0xfc, 0xbc, 0xf1, 0x19, 0x9a,
	0xfc, 0x89, 0xc0, 0xb7, 0xac, 0x0e, 0xb1, 0x4c, 0xca, 0xd8, 0xdd, 0x63, 0x6a, 0xcd, 0x65, 0x51,
	0xca, 0x5c, 0xda, 0x4d, 0xad, 0x43, 0xb8, 0x67, 0x85, 0x59, 0xb4, 0x35, 0xb0, 0x86, 0x3a, 0x03,
	0x3b, 0x91, 0xb2, 0x3c, 0x8a, 0x99, 0xcb, 0xfc, 0x11, 0xe3, 0x2f, 0xe0, 0x24, 0x5a, 0x2b, 0xbe,
	0x67, 0x2b, 0x9e, 0x49, 0x15, 0x25, 0x89, 0xb4, 0xce, 0x2d, 0xde, 0x7c, 0xb8, 0x1d, 0xfd, 0x5f,
	0xa2, 0x03, 0x4b, 0xbc, 0x74, 0xf8, 0xbf, 0x21, 0xf4, 0x9f, 0x0e, 0xe1, 0xe4, 0x63, 0x08, 0xbe,
	0x73, 0x79, 0x7c, 0xcf, 0x19, 0x8a, 0x8c, 0xa1, 0xfd, 0xda, 0x01, 0x23, 0x5b, 0x13, 0x27, 0x31,
	0xb4, 0x0d, 0x7c, 0x6a, 0x72, 0x9d, 0x8b, 0x7a, 0x72, 0x5d, 0xe3, 0xe7, 0xd0, 0xd1, 0x81, 0x5a,
	0x65, 0x65, 0x6a, 0x46, 0xef, 0xd3, 0x40, 0xe3, 0xef, 0xcb, 0x14, 0xbf, 0x03, 0x5d, 0x23, 0x99,
	0xf0, 0xb9, 0xd9, 0x35, 0xf1, 0x23, 0xbb, 0x54, 0x8b, 0x2f, 0x5f, 0x1f, 0x88, 0x77, 0x7d, 0x20,
	0xde, 0xcd, 0x81, 0x78, 0x77, 0x07, 0xe2, 0x3d, 0x1e, 0x88, 0xf7, 0x73, 0x45, 0xd0, 0xef, 0x15,
	0xf1, 0xfe, 0xa8, 0x08, 0x7a, 0x5d, 0x11, 0x74, 0x5d, 0x11, 0x74, 0x57, 0x11, 0xf4, 0x77, 0x45,
	0xbc, 0xc7, 0x8a, 0xa0, 0x5f, 0xef, 0x89, 0x77, 0x7d, 0x4f, 0xbc, 0x9b, 0x7b, 0xe2, 0x5d, 0xf8,
	0xe6, 0x0f, 0xea, 0xd3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x99, 0x85, 0x6f, 0x01, 0xe7, 0x04,
	0x00, 0x00,
}
